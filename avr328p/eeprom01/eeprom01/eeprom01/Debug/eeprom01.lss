
eeprom01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000258  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca6  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000796  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e6  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005b4  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  8e:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_Command>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
  96:	95 b1       	in	r25, 0x05	; 5
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	95 b9       	out	0x05, r25	; 5
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9e 7f       	andi	r25, 0xFE	; 254
  a6:	95 b9       	out	0x05, r25	; 5
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	92 60       	ori	r25, 0x02	; 2
  ac:	95 b9       	out	0x05, r25	; 5
  ae:	32 e0       	ldi	r19, 0x02	; 2
  b0:	3a 95       	dec	r19
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_Command+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_Command+0x20>
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	9d 7f       	andi	r25, 0xFD	; 253
  ba:	95 b9       	out	0x05, r25	; 5
  bc:	ef e8       	ldi	r30, 0x8F	; 143
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Command+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Command+0x30>
  c6:	00 00       	nop
  c8:	25 b1       	in	r18, 0x05	; 5
  ca:	f0 e1       	ldi	r31, 0x10	; 16
  cc:	8f 9f       	mul	r24, r31
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	92 2f       	mov	r25, r18
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	89 2b       	or	r24, r25
  d8:	85 b9       	out	0x05, r24	; 5
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	85 b9       	out	0x05, r24	; 5
  e0:	32 e0       	ldi	r19, 0x02	; 2
  e2:	3a 95       	dec	r19
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Command+0x4c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Command+0x52>
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	8f e9       	ldi	r24, 0x9F	; 159
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Command+0x5c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_Command+0x62>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <LCD_Init>:
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	84 b9       	out	0x04, r24	; 4
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9c e9       	ldi	r25, 0x9C	; 156
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_Init+0x8>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_Init+0xe>
 10a:	00 00       	nop
 10c:	83 e3       	ldi	r24, 0x33	; 51
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 114:	82 e3       	ldi	r24, 0x32	; 50
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 13c:	08 95       	ret

0000013e <LCD_Char>:
 13e:	95 b1       	in	r25, 0x05	; 5
 140:	9f 70       	andi	r25, 0x0F	; 15
 142:	28 2f       	mov	r18, r24
 144:	20 7f       	andi	r18, 0xF0	; 240
 146:	92 2b       	or	r25, r18
 148:	95 b9       	out	0x05, r25	; 5
 14a:	95 b1       	in	r25, 0x05	; 5
 14c:	91 60       	ori	r25, 0x01	; 1
 14e:	95 b9       	out	0x05, r25	; 5
 150:	95 b1       	in	r25, 0x05	; 5
 152:	92 60       	ori	r25, 0x02	; 2
 154:	95 b9       	out	0x05, r25	; 5
 156:	32 e0       	ldi	r19, 0x02	; 2
 158:	3a 95       	dec	r19
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_Char+0x1a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_Char+0x20>
 15e:	95 b1       	in	r25, 0x05	; 5
 160:	9d 7f       	andi	r25, 0xFD	; 253
 162:	95 b9       	out	0x05, r25	; 5
 164:	ef e8       	ldi	r30, 0x8F	; 143
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_Char+0x2a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_Char+0x30>
 16e:	00 00       	nop
 170:	25 b1       	in	r18, 0x05	; 5
 172:	f0 e1       	ldi	r31, 0x10	; 16
 174:	8f 9f       	mul	r24, r31
 176:	c0 01       	movw	r24, r0
 178:	11 24       	eor	r1, r1
 17a:	92 2f       	mov	r25, r18
 17c:	9f 70       	andi	r25, 0x0F	; 15
 17e:	89 2b       	or	r24, r25
 180:	85 b9       	out	0x05, r24	; 5
 182:	85 b1       	in	r24, 0x05	; 5
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 b9       	out	0x05, r24	; 5
 188:	32 e0       	ldi	r19, 0x02	; 2
 18a:	3a 95       	dec	r19
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Char+0x4c>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Char+0x52>
 190:	85 b1       	in	r24, 0x05	; 5
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	85 b9       	out	0x05, r24	; 5
 196:	8f e9       	ldi	r24, 0x9F	; 159
 198:	9f e0       	ldi	r25, 0x0F	; 15
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_Char+0x5c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_Char+0x62>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <LCD_String>:
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	8c 01       	movw	r16, r24
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <LCD_String+0x16>
 1b4:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Char>
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	f8 01       	movw	r30, r16
 1bc:	ec 0f       	add	r30, r28
 1be:	fd 1f       	adc	r31, r29
 1c0:	80 81       	ld	r24, Z
 1c2:	81 11       	cpse	r24, r1
 1c4:	f7 cf       	rjmp	.-18     	; 0x1b4 <LCD_String+0x10>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <EEPROM_write>:
}

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
 1d0:	f9 99       	sbic	0x1f, 1	; 31
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <EEPROM_write>
	/* Set up address and Data Registers */
	EEAR = uiAddress;
 1d4:	92 bd       	out	0x22, r25	; 34
 1d6:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
 1d8:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 1da:	8f b3       	in	r24, 0x1f	; 31
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 1e0:	8f b3       	in	r24, 0x1f	; 31
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	8f bb       	out	0x1f, r24	; 31
 1e6:	08 95       	ret

000001e8 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
 1e8:	f9 99       	sbic	0x1f, 1	; 31
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 1ec:	92 bd       	out	0x22, r25	; 34
 1ee:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 1f0:	8f b3       	in	r24, 0x1f	; 31
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
 1f6:	80 b5       	in	r24, 0x20	; 32
 1f8:	08 95       	ret

000001fa <main>:

void EEPROM_write(unsigned int, unsigned char);
unsigned char EEPROM_read(unsigned int);

int main(void)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
	LCD_Init();			/* Initialization of LCD*/
 200:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Init>
	LCD_String("Practice EEPROM 01");	/* Write string on 1st line of LCD*/
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_String>
	char letter='A';
	
	for (int i=22; i<48; i++)
 20c:	c6 e1       	ldi	r28, 0x16	; 22
 20e:	d0 e0       	ldi	r29, 0x00	; 0

int main(void)
{
	LCD_Init();			/* Initialization of LCD*/
	LCD_String("Practice EEPROM 01");	/* Write string on 1st line of LCD*/
	char letter='A';
 210:	11 e4       	ldi	r17, 0x41	; 65
	
	for (int i=22; i<48; i++)
 212:	17 c0       	rjmp	.+46     	; 0x242 <main+0x48>
	{
		EEPROM_write(i, letter);
 214:	61 2f       	mov	r22, r17
 216:	ce 01       	movw	r24, r28
 218:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EEPROM_write>
		LCD_Command(0xC0);		/* Go to 2nd line*/
 21c:	80 ec       	ldi	r24, 0xC0	; 192
 21e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
		LCD_Char(EEPROM_read(i));	/* Write string on 2nd line	11*/
 222:	ce 01       	movw	r24, r28
 224:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <EEPROM_read>
 228:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	84 e3       	ldi	r24, 0x34	; 52
 230:	9c e0       	ldi	r25, 0x0C	; 12
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x38>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x42>
 23c:	00 00       	nop
		_delay_ms(500);
		letter++;
 23e:	1f 5f       	subi	r17, 0xFF	; 255
{
	LCD_Init();			/* Initialization of LCD*/
	LCD_String("Practice EEPROM 01");	/* Write string on 1st line of LCD*/
	char letter='A';
	
	for (int i=22; i<48; i++)
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	c0 33       	cpi	r28, 0x30	; 48
 244:	d1 05       	cpc	r29, r1
 246:	34 f3       	brlt	.-52     	; 0x214 <main+0x1a>
		LCD_Char(EEPROM_read(i));	/* Write string on 2nd line	11*/
		_delay_ms(500);
		letter++;
	}
	return 0;
}
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
