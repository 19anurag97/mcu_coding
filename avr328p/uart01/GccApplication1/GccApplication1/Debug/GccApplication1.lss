
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090c  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000314  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <usart_init>:
	return 0;
}

void usart_init(unsigned char ubr)
{
	UBRR0L = ubr;					//52->0011 0100
  80:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = 0x06;					//00000110
  84:	86 e0       	ldi	r24, 0x06	; 6
  86:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = 24;
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  90:	08 95       	ret

00000092 <uartsend_int>:
}

void uartsend_int(unsigned int data)
{
	UCSR0A |= (1 << 6);	//clear TXCn flag.
  92:	e0 ec       	ldi	r30, 0xC0	; 192
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	90 81       	ld	r25, Z
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	90 83       	st	Z, r25
	while (UCSR0A & (1 << UDRE0))
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <uartsend_int+0x10>
	{
		UDR0 = data;		//send data.
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void uartsend_int(unsigned int data)
{
	UCSR0A |= (1 << 6);	//clear TXCn flag.
	while (UCSR0A & (1 << UDRE0))
  a2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a6:	95 fd       	sbrc	r25, 5
  a8:	fa cf       	rjmp	.-12     	; 0x9e <uartsend_int+0xc>
	{
		UDR0 = data;		//send data.
	}
}
  aa:	08 95       	ret

000000ac <uartrcv_int>:

void uartrcv_int()
{
	int temp = (int)UDR0;
  ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (temp == 188)
  b0:	8c 3b       	cpi	r24, 0xBC	; 188
  b2:	19 f4       	brne	.+6      	; 0xba <uartrcv_int+0xe>
	{
		PORTB |= (1 << 1);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <main>:
void uartrcv_int(void);
void led_on(void);

int main(void)
{
	usart_init(CALC_UBRR);	//12bits	0010 0101 1000 0000
  bc:	82 e6       	ldi	r24, 0x62	; 98
  be:	0e 94 40 00 	call	0x80	; 0x80 <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	8f ec       	ldi	r24, 0xCF	; 207
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0xa>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x10>
  cc:	00 00       	nop
	_delay_us(1000);
	
	/*master node operation*/
	DDRB |= (1 << 1);
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 b9       	out	0x04, r24	; 4
	uartsend_int(122);
  d4:	8a e7       	ldi	r24, 0x7A	; 122
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <uartsend_int>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	9f ef       	ldi	r25, 0xFF	; 255
  de:	23 ed       	ldi	r18, 0xD3	; 211
  e0:	80 e3       	ldi	r24, 0x30	; 48
  e2:	91 50       	subi	r25, 0x01	; 1
  e4:	20 40       	sbci	r18, 0x00	; 0
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x26>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x30>
  ec:	00 00       	nop
	_delay_ms(2000);
	uartsend_int(142);
  ee:	8e e8       	ldi	r24, 0x8E	; 142
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 49 00 	call	0x92	; 0x92 <uartsend_int>
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	23 ed       	ldi	r18, 0xD3	; 211
  fa:	80 e3       	ldi	r24, 0x30	; 48
  fc:	91 50       	subi	r25, 0x01	; 1
  fe:	20 40       	sbci	r18, 0x00	; 0
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x40>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x4a>
 106:	00 00       	nop
	_delay_ms(2000);
	uartsend_int(152);
 108:	88 e9       	ldi	r24, 0x98	; 152
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 49 00 	call	0x92	; 0x92 <uartsend_int>
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	23 ed       	ldi	r18, 0xD3	; 211
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	91 50       	subi	r25, 0x01	; 1
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x5a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x64>
 120:	00 00       	nop
 122:	0d c0       	rjmp	.+26     	; 0x13e <main+0x82>
	
	while (1)	//check if data received???
	{
		while(UCSR0A & (1 << RXC0))
		{
			uartrcv_int();
 124:	0e 94 56 00 	call	0xac	; 0xac <uartrcv_int>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	87 ec       	ldi	r24, 0xC7	; 199
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x70>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x76>
 132:	00 00       	nop
			_delay_us(100);
			UCSR0A &= ~(1 << RXC0);
 134:	e0 ec       	ldi	r30, 0xC0	; 192
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	80 83       	st	Z, r24
	uartsend_int(152);
	_delay_ms(2000);
	
	while (1)	//check if data received???
	{
		while(UCSR0A & (1 << RXC0))
 13e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 142:	88 23       	and	r24, r24
 144:	7c f3       	brlt	.-34     	; 0x124 <main+0x68>
 146:	fb cf       	rjmp	.-10     	; 0x13e <main+0x82>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
