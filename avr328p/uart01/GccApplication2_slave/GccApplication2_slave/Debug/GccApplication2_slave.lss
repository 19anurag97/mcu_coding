
GccApplication2_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085b  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071c  00000000  00000000  00000ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000324  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f3  00000000  00000000  00001967  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 75 00 	call	0xea	; 0xea <main>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <usart_init>:
	return 0;
}

void usart_init(unsigned char ubr)
{
	UBRR0L = ubr;					//52->0011 0100
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = 0x06;					//00000110
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = 24;
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  a0:	08 95       	ret

000000a2 <uartsend_int>:
}

void uartsend_int(unsigned int data)
{
	UCSR0A |= (1 << 6);	//clear TXCn flag.
  a2:	e0 ec       	ldi	r30, 0xC0	; 192
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	90 81       	ld	r25, Z
  a8:	90 64       	ori	r25, 0x40	; 64
  aa:	90 83       	st	Z, r25
	while (UCSR0A & (1 << UDRE0))
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <uartsend_int+0x10>
	{
		UDR0 = data;		//send data.
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void uartsend_int(unsigned int data)
{
	UCSR0A |= (1 << 6);	//clear TXCn flag.
	while (UCSR0A & (1 << UDRE0))
  b2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b6:	95 fd       	sbrc	r25, 5
  b8:	fa cf       	rjmp	.-12     	; 0xae <uartsend_int+0xc>
	{
		UDR0 = data;		//send data.
	}
}
  ba:	08 95       	ret

000000bc <uartrcv_int>:

void uartrcv_int()
{
	int temp = (int)UDR0;
  bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	switch (temp)
  c0:	8e 38       	cpi	r24, 0x8E	; 142
  c2:	41 f0       	breq	.+16     	; 0xd4 <uartrcv_int+0x18>
  c4:	88 39       	cpi	r24, 0x98	; 152
  c6:	51 f0       	breq	.+20     	; 0xdc <uartrcv_int+0x20>
  c8:	8a 37       	cpi	r24, 0x7A	; 122
  ca:	71 f4       	brne	.+28     	; 0xe8 <uartrcv_int+0x2c>
	{
	case 122:
		PORTB |= (1 << 0);
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	85 b9       	out	0x05, r24	; 5
		break;
  d2:	08 95       	ret
		
	case 142:
		PORTB |= (1 << 1);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	85 b9       	out	0x05, r24	; 5
		break;
  da:	08 95       	ret
	
	case 152:
		PORTB |= (1 << 2);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	85 b9       	out	0x05, r24	; 5
		ALL_LED_HIGH = true;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	08 95       	ret

000000ea <main>:
void uartrcv_int(void);
void led_on(void);

int main(void)
{
	usart_init(CALC_UBRR);	//12bits	0010 0101 1000 0000
  ea:	82 e6       	ldi	r24, 0x62	; 98
  ec:	0e 94 48 00 	call	0x90	; 0x90 <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f ec       	ldi	r24, 0xCF	; 207
  f2:	97 e0       	ldi	r25, 0x07	; 7
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0xa>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x10>
  fa:	00 00       	nop
// 	_delay_ms(2000);
// 	uartsend_int(152);
// 	_delay_ms(2000);
	
	/*slave node operation*/
	DDRB |= (1 << 0)|(1 << 1)|(1 << 2);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	84 b9       	out	0x04, r24	; 4
	while (!(ALL_LED_HIGH))
 102:	0b c0       	rjmp	.+22     	; 0x11a <main+0x30>
	{
		uartrcv_int();
 104:	0e 94 5e 00 	call	0xbc	; 0xbc <uartrcv_int>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	29 e6       	ldi	r18, 0x69	; 105
 10c:	88 e1       	ldi	r24, 0x18	; 24
 10e:	91 50       	subi	r25, 0x01	; 1
 110:	20 40       	sbci	r18, 0x00	; 0
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x24>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x2e>
 118:	00 00       	nop
// 	uartsend_int(152);
// 	_delay_ms(2000);
	
	/*slave node operation*/
	DDRB |= (1 << 0)|(1 << 1)|(1 << 2);
	while (!(ALL_LED_HIGH))
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	88 23       	and	r24, r24
 120:	89 f3       	breq	.-30     	; 0x104 <main+0x1a>
	{
		uartrcv_int();
		_delay_ms(1000);
	}
	uartsend_int(188);
 122:	8c eb       	ldi	r24, 0xBC	; 188
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 51 00 	call	0xa2	; 0xa2 <uartsend_int>
	
	return 0;
}
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	08 95       	ret

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
