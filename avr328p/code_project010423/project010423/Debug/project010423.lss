
project010423.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  00000746  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000746  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ad3  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000796  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fb  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000548  00000000  00000000  000026cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3e       	cpi	r26, 0xE6	; 230
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
  8e:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GLCD_Command>:
#define TotalPage	 8

/* Function decalarations */
void GLCD_Command(char Command)		/* GLCD command function */
{
	Data_Port = Command;		/* Copy command on data pin */
  96:	85 b9       	out	0x05, r24	; 5
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
  98:	88 b1       	in	r24, 0x08	; 8
  9a:	8f 7d       	andi	r24, 0xDF	; 223
  9c:	88 b9       	out	0x08, r24	; 8
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
  9e:	88 b1       	in	r24, 0x08	; 8
  a0:	8f 7e       	andi	r24, 0xEF	; 239
  a2:	88 b9       	out	0x08, r24	; 8
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <GLCD_Command+0x16>
  b0:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	88 b9       	out	0x08, r24	; 8
  b8:	8d e0       	ldi	r24, 0x0D	; 13
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <GLCD_Command+0x24>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <GLCD_Data>:
	_delay_us(5);
}

void GLCD_Data(char Data)		/* GLCD data function */
{
	Data_Port = Data;		/* Copy data on data pin */
  c2:	85 b9       	out	0x05, r24	; 5
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	88 b9       	out	0x08, r24	; 8
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	8f 7e       	andi	r24, 0xEF	; 239
  ce:	88 b9       	out	0x08, r24	; 8
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	88 b9       	out	0x08, r24	; 8
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <GLCD_Data+0x16>
  dc:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	88 b9       	out	0x08, r24	; 8
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <GLCD_Data+0x24>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <GLCD_Init>:
	_delay_us(5);
}

void GLCD_Init()			/* GLCD initialize function */
{
	Data_Port_Dir = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 b9       	out	0x04, r24	; 4
	Command_Port_Dir = 0xFF;
  f2:	87 b9       	out	0x07, r24	; 7
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	9c e9       	ldi	r25, 0x9C	; 156
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <GLCD_Init+0x10>
 102:	00 c0       	rjmp	.+0      	; 0x104 <GLCD_Init+0x16>
 104:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
 106:	8e e3       	ldi	r24, 0x3E	; 62
 108:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 10c:	80 e4       	ldi	r24, 0x40	; 64
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 112:	88 eb       	ldi	r24, 0xB8	; 184
 114:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
 118:	80 ec       	ldi	r24, 0xC0	; 192
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
 124:	08 95       	ret

00000126 <GLCD_ClearAll>:
}

void GLCD_ClearAll()			/* GLCD all display clear function */
{
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	86 60       	ori	r24, 0x06	; 6
 132:	88 b9       	out	0x08, r24	; 8
	for(i = 0; i < TotalPage; i++)
 134:	00 e0       	ldi	r16, 0x00	; 0
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	10 c0       	rjmp	.+32     	; 0x15a <GLCD_ClearAll+0x34>
	{
		GLCD_Command((0xB8) + i);/* Increment page */
 13a:	88 eb       	ldi	r24, 0xB8	; 184
 13c:	80 0f       	add	r24, r16
 13e:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
		for(j = 0; j < 64; j++)
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
 146:	04 c0       	rjmp	.+8      	; 0x150 <GLCD_ClearAll+0x2a>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 61 00 	call	0xc2	; 0xc2 <GLCD_Data>
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	c0 34       	cpi	r28, 0x40	; 64
 152:	d1 05       	cpc	r29, r1
 154:	cc f3       	brlt	.-14     	; 0x148 <GLCD_ClearAll+0x22>
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
 156:	0f 5f       	subi	r16, 0xFF	; 255
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	08 30       	cpi	r16, 0x08	; 8
 15c:	11 05       	cpc	r17, r1
 15e:	6c f3       	brlt	.-38     	; 0x13a <GLCD_ClearAll+0x14>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 166:	88 eb       	ldi	r24, 0xB8	; 184
 168:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <GLCD_String>:

void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
 176:	2f 92       	push	r2
 178:	3f 92       	push	r3
 17a:	4f 92       	push	r4
 17c:	5f 92       	push	r5
 17e:	6f 92       	push	r6
 180:	7f 92       	push	r7
 182:	8f 92       	push	r8
 184:	9f 92       	push	r9
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	2a 97       	sbiw	r28, 0x0a	; 10
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	78 87       	std	Y+8, r23	; 0x08
 1ac:	6f 83       	std	Y+7, r22	; 0x07
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	3e 83       	std	Y+6, r19	; 0x06
 1b4:	2d 83       	std	Y+5, r18	; 0x05
 1b6:	c9 01       	movw	r24, r18
 1b8:	88 54       	subi	r24, 0x48	; 72
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
	
	Command_Port |= (1 << CS1);	/* Select Left half of display */
 1c0:	98 b1       	in	r25, 0x08	; 8
 1c2:	92 60       	ori	r25, 0x02	; 2
 1c4:	98 b9       	out	0x08, r25	; 8
	Command_Port &= ~(1 << CS2);
 1c6:	98 b1       	in	r25, 0x08	; 8
 1c8:	9b 7f       	andi	r25, 0xFB	; 251
 1ca:	98 b9       	out	0x08, r25	; 8
	
	GLCD_Command(Page);
 1cc:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
 1d0:	51 2c       	mov	r5, r1
 1d2:	31 2c       	mov	r3, r1
 1d4:	21 2c       	mov	r2, r1
 1d6:	0f 2e       	mov	r0, r31
 1d8:	ff e3       	ldi	r31, 0x3F	; 63
 1da:	4f 2e       	mov	r4, r31
 1dc:	f0 2d       	mov	r31, r0

void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
 1de:	1a 86       	std	Y+10, r1	; 0x0a
 1e0:	19 86       	std	Y+9, r1	; 0x09
	
	Command_Port |= (1 << CS1);	/* Select Left half of display */
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
 1e2:	1a 82       	std	Y+2, r1	; 0x02
 1e4:	19 82       	std	Y+1, r1	; 0x01
 1e6:	4a c1       	rjmp	.+660    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))//5
 1e8:	6d 80       	ldd	r6, Y+5	; 0x05
 1ea:	7e 80       	ldd	r7, Y+6	; 0x06
 1ec:	71 94       	neg	r7
 1ee:	61 94       	neg	r6
 1f0:	71 08       	sbc	r7, r1
 1f2:	76 94       	lsr	r7
 1f4:	76 2c       	mov	r7, r6
 1f6:	66 24       	eor	r6, r6
 1f8:	77 94       	ror	r7
 1fa:	67 94       	ror	r6
 1fc:	95 e0       	ldi	r25, 0x05	; 5
 1fe:	69 1a       	sub	r6, r25
 200:	9c ef       	ldi	r25, 0xFC	; 252
 202:	79 0a       	sbc	r7, r25
 204:	e9 85       	ldd	r30, Y+9	; 0x09
 206:	fa 85       	ldd	r31, Y+10	; 0x0a
 208:	6e 16       	cp	r6, r30
 20a:	7f 06       	cpc	r7, r31
 20c:	08 f4       	brcc	.+2      	; 0x210 <GLCD_String+0x9a>
 20e:	40 c1       	rjmp	.+640    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		break;
		if (str[i]!=32)
 210:	80 32       	cpi	r24, 0x20	; 32
 212:	09 f0       	breq	.+2      	; 0x216 <GLCD_String+0xa0>
 214:	48 c0       	rjmp	.+144    	; 0x2a6 <GLCD_String+0x130>
 216:	50 c0       	rjmp	.+160    	; 0x2b8 <GLCD_String+0x142>
		{
			for (column=1; column<=FontWidth; column++)
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
 218:	a9 84       	ldd	r10, Y+9	; 0x09
 21a:	ba 84       	ldd	r11, Y+10	; 0x0a
 21c:	ae 0c       	add	r10, r14
 21e:	bf 1c       	adc	r11, r15
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	5f e3       	ldi	r21, 0x3F	; 63
 228:	65 2d       	mov	r22, r5
 22a:	73 2d       	mov	r23, r3
 22c:	82 2d       	mov	r24, r2
 22e:	94 2d       	mov	r25, r4
 230:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 234:	c6 2e       	mov	r12, r22
 236:	d7 2e       	mov	r13, r23
 238:	08 2f       	mov	r16, r24
 23a:	19 2f       	mov	r17, r25
 23c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fixsfsi>
 240:	76 95       	lsr	r23
 242:	76 2f       	mov	r23, r22
 244:	66 27       	eor	r22, r22
 246:	77 95       	ror	r23
 248:	67 95       	ror	r22
 24a:	a6 16       	cp	r10, r22
 24c:	b7 06       	cpc	r11, r23
 24e:	39 f5       	brne	.+78     	; 0x29e <GLCD_String+0x128>
				{
					if (column == FontWidth)
 250:	f5 e0       	ldi	r31, 0x05	; 5
 252:	ef 16       	cp	r14, r31
 254:	f1 04       	cpc	r15, r1
 256:	81 f1       	breq	.+96     	; 0x2b8 <GLCD_String+0x142>
					break;
					GLCD_Command(0x40);
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
					Y_address = Y_address + column;
					Command_Port ^= (1 << CS1);
 25e:	98 b1       	in	r25, 0x08	; 8
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	89 27       	eor	r24, r25
 264:	88 b9       	out	0x08, r24	; 8
					Command_Port ^= (1 << CS2);
 266:	98 b1       	in	r25, 0x08	; 8
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	89 27       	eor	r24, r25
 26c:	88 b9       	out	0x08, r24	; 8
					GLCD_Command(Page + Page_inc);
 26e:	2b 81       	ldd	r18, Y+3	; 0x03
 270:	3c 81       	ldd	r19, Y+4	; 0x04
 272:	b9 01       	movw	r22, r18
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 13 03 	call	0x626	; 0x626 <__floatunsisf>
 27c:	25 2d       	mov	r18, r5
 27e:	33 2d       	mov	r19, r3
 280:	42 2d       	mov	r20, r2
 282:	54 2d       	mov	r21, r4
 284:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 288:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fixunssfsi>
 28c:	86 2f       	mov	r24, r22
 28e:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
 292:	5c 2c       	mov	r5, r12
 294:	3d 2c       	mov	r3, r13
 296:	20 2e       	mov	r2, r16
 298:	41 2e       	mov	r4, r17
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
				{
					if (column == FontWidth)
					break;
					GLCD_Command(0x40);
					Y_address = Y_address + column;
 29a:	ba 86       	std	Y+10, r11	; 0x0a
 29c:	a9 86       	std	Y+9, r10	; 0x09
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))//5
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
 29e:	3f ef       	ldi	r19, 0xFF	; 255
 2a0:	e3 1a       	sub	r14, r19
 2a2:	f3 0a       	sbc	r15, r19
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <GLCD_String+0x136>
 2a6:	ee 24       	eor	r14, r14
 2a8:	e3 94       	inc	r14
 2aa:	f1 2c       	mov	r15, r1
 2ac:	96 e0       	ldi	r25, 0x06	; 6
 2ae:	e9 16       	cp	r14, r25
 2b0:	f1 04       	cpc	r15, r1
 2b2:	08 f4       	brcc	.+2      	; 0x2b6 <GLCD_String+0x140>
 2b4:	b1 cf       	rjmp	.-158    	; 0x218 <GLCD_String+0xa2>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <GLCD_String+0x142>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
 2b8:	89 85       	ldd	r24, Y+9	; 0x09
 2ba:	9a 85       	ldd	r25, Y+10	; 0x0a
 2bc:	68 16       	cp	r6, r24
 2be:	79 06       	cpc	r7, r25
 2c0:	08 f4       	brcc	.+2      	; 0x2c4 <GLCD_String+0x14e>
 2c2:	e6 c0       	rjmp	.+460    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
 2c4:	f4 01       	movw	r30, r8
 2c6:	80 81       	ld	r24, Z
 2c8:	80 32       	cpi	r24, 0x20	; 32
 2ca:	09 f4       	brne	.+2      	; 0x2ce <GLCD_String+0x158>
 2cc:	4b c0       	rjmp	.+150    	; 0x364 <GLCD_String+0x1ee>
 2ce:	00 e0       	ldi	r16, 0x00	; 0
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	96 c0       	rjmp	.+300    	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
 2d4:	f4 01       	movw	r30, r8
 2d6:	80 81       	ld	r24, Z
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	80 97       	sbiw	r24, 0x20	; 32
 2dc:	fc 01       	movw	r30, r24
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	ee 0f       	add	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	e8 0f       	add	r30, r24
 2e8:	f9 1f       	adc	r31, r25
 2ea:	e0 50       	subi	r30, 0x00	; 0
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	e0 0f       	add	r30, r16
 2f0:	f1 1f       	adc	r31, r17
 2f2:	80 81       	ld	r24, Z
 2f4:	0e 94 61 00 	call	0xc2	; 0xc2 <GLCD_Data>
				if((Y_address+1)%64==0)
 2f8:	29 85       	ldd	r18, Y+9	; 0x09
 2fa:	3a 85       	ldd	r19, Y+10	; 0x0a
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	3a 87       	std	Y+10, r19	; 0x0a
 302:	29 87       	std	Y+9, r18	; 0x09
 304:	c9 01       	movw	r24, r18
 306:	8f 73       	andi	r24, 0x3F	; 63
 308:	99 27       	eor	r25, r25
 30a:	89 2b       	or	r24, r25
 30c:	41 f5       	brne	.+80     	; 0x35e <GLCD_String+0x1e8>
				{
					Command_Port ^= (1 << CS1);
 30e:	98 b1       	in	r25, 0x08	; 8
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	89 27       	eor	r24, r25
 314:	88 b9       	out	0x08, r24	; 8
					Command_Port ^= (1 << CS2);
 316:	98 b1       	in	r25, 0x08	; 8
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	89 27       	eor	r24, r25
 31c:	88 b9       	out	0x08, r24	; 8
					GLCD_Command((Page+Page_inc));
 31e:	eb 81       	ldd	r30, Y+3	; 0x03
 320:	fc 81       	ldd	r31, Y+4	; 0x04
 322:	bf 01       	movw	r22, r30
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 13 03 	call	0x626	; 0x626 <__floatunsisf>
 32c:	25 2d       	mov	r18, r5
 32e:	33 2d       	mov	r19, r3
 330:	42 2d       	mov	r20, r2
 332:	54 2d       	mov	r21, r4
 334:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 338:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fixunssfsi>
 33c:	86 2f       	mov	r24, r22
 33e:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	5f e3       	ldi	r21, 0x3F	; 63
 34a:	65 2d       	mov	r22, r5
 34c:	73 2d       	mov	r23, r3
 34e:	82 2d       	mov	r24, r2
 350:	94 2d       	mov	r25, r4
 352:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 356:	56 2e       	mov	r5, r22
 358:	37 2e       	mov	r3, r23
 35a:	28 2e       	mov	r2, r24
 35c:	49 2e       	mov	r4, r25
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
 35e:	0f 5f       	subi	r16, 0xFF	; 255
 360:	1f 4f       	sbci	r17, 0xFF	; 255
 362:	02 c0       	rjmp	.+4      	; 0x368 <GLCD_String+0x1f2>
 364:	00 e0       	ldi	r16, 0x00	; 0
 366:	10 e0       	ldi	r17, 0x00	; 0
 368:	05 30       	cpi	r16, 0x05	; 5
 36a:	11 05       	cpc	r17, r1
 36c:	08 f4       	brcc	.+2      	; 0x370 <GLCD_String+0x1fa>
 36e:	b2 cf       	rjmp	.-156    	; 0x2d4 <GLCD_String+0x15e>
 370:	7f c0       	rjmp	.+254    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		}
		else
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
 372:	f4 01       	movw	r30, r8
 374:	80 81       	ld	r24, Z
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	80 97       	sbiw	r24, 0x20	; 32
 37a:	fc 01       	movw	r30, r24
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	e8 0f       	add	r30, r24
 386:	f9 1f       	adc	r31, r25
 388:	e0 50       	subi	r30, 0x00	; 0
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	e0 0f       	add	r30, r16
 38e:	f1 1f       	adc	r31, r17
 390:	80 81       	ld	r24, Z
 392:	0e 94 61 00 	call	0xc2	; 0xc2 <GLCD_Data>
				if((Y_address+1)%64==0)
 396:	29 85       	ldd	r18, Y+9	; 0x09
 398:	3a 85       	ldd	r19, Y+10	; 0x0a
 39a:	2f 5f       	subi	r18, 0xFF	; 255
 39c:	3f 4f       	sbci	r19, 0xFF	; 255
 39e:	3a 87       	std	Y+10, r19	; 0x0a
 3a0:	29 87       	std	Y+9, r18	; 0x09
 3a2:	c9 01       	movw	r24, r18
 3a4:	8f 73       	andi	r24, 0x3F	; 63
 3a6:	99 27       	eor	r25, r25
 3a8:	89 2b       	or	r24, r25
 3aa:	41 f5       	brne	.+80     	; 0x3fc <GLCD_String+0x286>
				{
					Command_Port ^= (1 << CS1);
 3ac:	98 b1       	in	r25, 0x08	; 8
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	89 27       	eor	r24, r25
 3b2:	88 b9       	out	0x08, r24	; 8
					Command_Port ^= (1 << CS2);
 3b4:	98 b1       	in	r25, 0x08	; 8
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	89 27       	eor	r24, r25
 3ba:	88 b9       	out	0x08, r24	; 8
					GLCD_Command((Page+Page_inc));
 3bc:	eb 81       	ldd	r30, Y+3	; 0x03
 3be:	fc 81       	ldd	r31, Y+4	; 0x04
 3c0:	bf 01       	movw	r22, r30
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 13 03 	call	0x626	; 0x626 <__floatunsisf>
 3ca:	25 2d       	mov	r18, r5
 3cc:	33 2d       	mov	r19, r3
 3ce:	42 2d       	mov	r20, r2
 3d0:	54 2d       	mov	r21, r4
 3d2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 3d6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fixunssfsi>
 3da:	86 2f       	mov	r24, r22
 3dc:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	5f e3       	ldi	r21, 0x3F	; 63
 3e8:	65 2d       	mov	r22, r5
 3ea:	73 2d       	mov	r23, r3
 3ec:	82 2d       	mov	r24, r2
 3ee:	94 2d       	mov	r25, r4
 3f0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 3f4:	56 2e       	mov	r5, r22
 3f6:	37 2e       	mov	r3, r23
 3f8:	28 2e       	mov	r2, r24
 3fa:	49 2e       	mov	r4, r25
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
 3fc:	0f 5f       	subi	r16, 0xFF	; 255
 3fe:	1f 4f       	sbci	r17, 0xFF	; 255
 400:	05 30       	cpi	r16, 0x05	; 5
 402:	11 05       	cpc	r17, r1
 404:	08 f4       	brcc	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	b5 cf       	rjmp	.-150    	; 0x372 <GLCD_String+0x1fc>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 61 00 	call	0xc2	; 0xc2 <GLCD_Data>
			Y_address++;
 40e:	89 85       	ldd	r24, Y+9	; 0x09
 410:	9a 85       	ldd	r25, Y+10	; 0x0a
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	9a 87       	std	Y+10, r25	; 0x0a
 416:	89 87       	std	Y+9, r24	; 0x09
			if((Y_address)%64 == 0)
 418:	8f 73       	andi	r24, 0x3F	; 63
 41a:	99 27       	eor	r25, r25
 41c:	89 2b       	or	r24, r25
 41e:	41 f5       	brne	.+80     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			{
				Command_Port ^= (1 << CS1);
 420:	98 b1       	in	r25, 0x08	; 8
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	89 27       	eor	r24, r25
 426:	88 b9       	out	0x08, r24	; 8
				Command_Port ^= (1 << CS2);
 428:	98 b1       	in	r25, 0x08	; 8
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	89 27       	eor	r24, r25
 42e:	88 b9       	out	0x08, r24	; 8
				GLCD_Command((Page+Page_inc));
 430:	eb 81       	ldd	r30, Y+3	; 0x03
 432:	fc 81       	ldd	r31, Y+4	; 0x04
 434:	bf 01       	movw	r22, r30
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 13 03 	call	0x626	; 0x626 <__floatunsisf>
 43e:	25 2d       	mov	r18, r5
 440:	33 2d       	mov	r19, r3
 442:	42 2d       	mov	r20, r2
 444:	54 2d       	mov	r21, r4
 446:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 44a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fixunssfsi>
 44e:	86 2f       	mov	r24, r22
 450:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
				Page_inc = Page_inc + 0.5;
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	5f e3       	ldi	r21, 0x3F	; 63
 45c:	65 2d       	mov	r22, r5
 45e:	73 2d       	mov	r23, r3
 460:	82 2d       	mov	r24, r2
 462:	94 2d       	mov	r25, r4
 464:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__addsf3>
 468:	56 2e       	mov	r5, r22
 46a:	37 2e       	mov	r3, r23
 46c:	28 2e       	mov	r2, r24
 46e:	49 2e       	mov	r4, r25
	
	Command_Port |= (1 << CS1);	/* Select Left half of display */
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
 470:	29 81       	ldd	r18, Y+1	; 0x01
 472:	3a 81       	ldd	r19, Y+2	; 0x02
 474:	2f 5f       	subi	r18, 0xFF	; 255
 476:	3f 4f       	sbci	r19, 0xFF	; 255
 478:	3a 83       	std	Y+2, r19	; 0x02
 47a:	29 83       	std	Y+1, r18	; 0x01
 47c:	8f 80       	ldd	r8, Y+7	; 0x07
 47e:	98 84       	ldd	r9, Y+8	; 0x08
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	9a 81       	ldd	r25, Y+2	; 0x02
 484:	88 0e       	add	r8, r24
 486:	99 1e       	adc	r9, r25
 488:	f4 01       	movw	r30, r8
 48a:	80 81       	ld	r24, Z
 48c:	81 11       	cpse	r24, r1
 48e:	ac ce       	rjmp	.-680    	; 0x1e8 <GLCD_String+0x72>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
 490:	80 e4       	ldi	r24, 0x40	; 64
 492:	0e 94 4b 00 	call	0x96	; 0x96 <GLCD_Command>
}
 496:	2a 96       	adiw	r28, 0x0a	; 10
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	bf 90       	pop	r11
 4b4:	af 90       	pop	r10
 4b6:	9f 90       	pop	r9
 4b8:	8f 90       	pop	r8
 4ba:	7f 90       	pop	r7
 4bc:	6f 90       	pop	r6
 4be:	5f 90       	pop	r5
 4c0:	4f 90       	pop	r4
 4c2:	3f 90       	pop	r3
 4c4:	2f 90       	pop	r2
 4c6:	08 95       	ret

000004c8 <main>:

int main(void)
{
	GLCD_Init();		/* Initialize GLCD */
 4c8:	0e 94 77 00 	call	0xee	; 0xee <GLCD_Init>
	GLCD_ClearAll();	/* Clear all GLCD display */
 4cc:	0e 94 93 00 	call	0x126	; 0x126 <GLCD_ClearAll>
	GLCD_String(0,"Atmel");	/* Print String on 0th page of display */
 4d0:	60 ee       	ldi	r22, 0xE0	; 224
 4d2:	72 e0       	ldi	r23, 0x02	; 2
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 bb 00 	call	0x176	; 0x176 <GLCD_String>

}
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	08 95       	ret

000004e0 <__subsf3>:
 4e0:	50 58       	subi	r21, 0x80	; 128

000004e2 <__addsf3>:
 4e2:	bb 27       	eor	r27, r27
 4e4:	aa 27       	eor	r26, r26
 4e6:	0e 94 88 02 	call	0x510	; 0x510 <__addsf3x>
 4ea:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 4ee:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 4f2:	38 f0       	brcs	.+14     	; 0x502 <__addsf3+0x20>
 4f4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 4f8:	20 f0       	brcs	.+8      	; 0x502 <__addsf3+0x20>
 4fa:	39 f4       	brne	.+14     	; 0x50a <__addsf3+0x28>
 4fc:	9f 3f       	cpi	r25, 0xFF	; 255
 4fe:	19 f4       	brne	.+6      	; 0x506 <__addsf3+0x24>
 500:	26 f4       	brtc	.+8      	; 0x50a <__addsf3+0x28>
 502:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>
 506:	0e f4       	brtc	.+2      	; 0x50a <__addsf3+0x28>
 508:	e0 95       	com	r30
 50a:	e7 fb       	bst	r30, 7
 50c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>

00000510 <__addsf3x>:
 510:	e9 2f       	mov	r30, r25
 512:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 516:	58 f3       	brcs	.-42     	; 0x4ee <__addsf3+0xc>
 518:	ba 17       	cp	r27, r26
 51a:	62 07       	cpc	r22, r18
 51c:	73 07       	cpc	r23, r19
 51e:	84 07       	cpc	r24, r20
 520:	95 07       	cpc	r25, r21
 522:	20 f0       	brcs	.+8      	; 0x52c <__addsf3x+0x1c>
 524:	79 f4       	brne	.+30     	; 0x544 <__addsf3x+0x34>
 526:	a6 f5       	brtc	.+104    	; 0x590 <__addsf3x+0x80>
 528:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 52c:	0e f4       	brtc	.+2      	; 0x530 <__addsf3x+0x20>
 52e:	e0 95       	com	r30
 530:	0b 2e       	mov	r0, r27
 532:	ba 2f       	mov	r27, r26
 534:	a0 2d       	mov	r26, r0
 536:	0b 01       	movw	r0, r22
 538:	b9 01       	movw	r22, r18
 53a:	90 01       	movw	r18, r0
 53c:	0c 01       	movw	r0, r24
 53e:	ca 01       	movw	r24, r20
 540:	a0 01       	movw	r20, r0
 542:	11 24       	eor	r1, r1
 544:	ff 27       	eor	r31, r31
 546:	59 1b       	sub	r21, r25
 548:	99 f0       	breq	.+38     	; 0x570 <__addsf3x+0x60>
 54a:	59 3f       	cpi	r21, 0xF9	; 249
 54c:	50 f4       	brcc	.+20     	; 0x562 <__addsf3x+0x52>
 54e:	50 3e       	cpi	r21, 0xE0	; 224
 550:	68 f1       	brcs	.+90     	; 0x5ac <__addsf3x+0x9c>
 552:	1a 16       	cp	r1, r26
 554:	f0 40       	sbci	r31, 0x00	; 0
 556:	a2 2f       	mov	r26, r18
 558:	23 2f       	mov	r18, r19
 55a:	34 2f       	mov	r19, r20
 55c:	44 27       	eor	r20, r20
 55e:	58 5f       	subi	r21, 0xF8	; 248
 560:	f3 cf       	rjmp	.-26     	; 0x548 <__addsf3x+0x38>
 562:	46 95       	lsr	r20
 564:	37 95       	ror	r19
 566:	27 95       	ror	r18
 568:	a7 95       	ror	r26
 56a:	f0 40       	sbci	r31, 0x00	; 0
 56c:	53 95       	inc	r21
 56e:	c9 f7       	brne	.-14     	; 0x562 <__addsf3x+0x52>
 570:	7e f4       	brtc	.+30     	; 0x590 <__addsf3x+0x80>
 572:	1f 16       	cp	r1, r31
 574:	ba 0b       	sbc	r27, r26
 576:	62 0b       	sbc	r22, r18
 578:	73 0b       	sbc	r23, r19
 57a:	84 0b       	sbc	r24, r20
 57c:	ba f0       	brmi	.+46     	; 0x5ac <__addsf3x+0x9c>
 57e:	91 50       	subi	r25, 0x01	; 1
 580:	a1 f0       	breq	.+40     	; 0x5aa <__addsf3x+0x9a>
 582:	ff 0f       	add	r31, r31
 584:	bb 1f       	adc	r27, r27
 586:	66 1f       	adc	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	c2 f7       	brpl	.-16     	; 0x57e <__addsf3x+0x6e>
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <__addsf3x+0x9c>
 590:	ba 0f       	add	r27, r26
 592:	62 1f       	adc	r22, r18
 594:	73 1f       	adc	r23, r19
 596:	84 1f       	adc	r24, r20
 598:	48 f4       	brcc	.+18     	; 0x5ac <__addsf3x+0x9c>
 59a:	87 95       	ror	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b7 95       	ror	r27
 5a2:	f7 95       	ror	r31
 5a4:	9e 3f       	cpi	r25, 0xFE	; 254
 5a6:	08 f0       	brcs	.+2      	; 0x5aa <__addsf3x+0x9a>
 5a8:	b0 cf       	rjmp	.-160    	; 0x50a <__addsf3+0x28>
 5aa:	93 95       	inc	r25
 5ac:	88 0f       	add	r24, r24
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <__addsf3x+0xa2>
 5b0:	99 27       	eor	r25, r25
 5b2:	ee 0f       	add	r30, r30
 5b4:	97 95       	ror	r25
 5b6:	87 95       	ror	r24
 5b8:	08 95       	ret

000005ba <__fixsfsi>:
 5ba:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fixunssfsi>
 5be:	68 94       	set
 5c0:	b1 11       	cpse	r27, r1
 5c2:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 5c6:	08 95       	ret

000005c8 <__fixunssfsi>:
 5c8:	0e 94 80 03 	call	0x700	; 0x700 <__fp_splitA>
 5cc:	88 f0       	brcs	.+34     	; 0x5f0 <__fixunssfsi+0x28>
 5ce:	9f 57       	subi	r25, 0x7F	; 127
 5d0:	98 f0       	brcs	.+38     	; 0x5f8 <__fixunssfsi+0x30>
 5d2:	b9 2f       	mov	r27, r25
 5d4:	99 27       	eor	r25, r25
 5d6:	b7 51       	subi	r27, 0x17	; 23
 5d8:	b0 f0       	brcs	.+44     	; 0x606 <__fixunssfsi+0x3e>
 5da:	e1 f0       	breq	.+56     	; 0x614 <__fixunssfsi+0x4c>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	1a f0       	brmi	.+6      	; 0x5ec <__fixunssfsi+0x24>
 5e6:	ba 95       	dec	r27
 5e8:	c9 f7       	brne	.-14     	; 0x5dc <__fixunssfsi+0x14>
 5ea:	14 c0       	rjmp	.+40     	; 0x614 <__fixunssfsi+0x4c>
 5ec:	b1 30       	cpi	r27, 0x01	; 1
 5ee:	91 f0       	breq	.+36     	; 0x614 <__fixunssfsi+0x4c>
 5f0:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_zero>
 5f4:	b1 e0       	ldi	r27, 0x01	; 1
 5f6:	08 95       	ret
 5f8:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 5fc:	67 2f       	mov	r22, r23
 5fe:	78 2f       	mov	r23, r24
 600:	88 27       	eor	r24, r24
 602:	b8 5f       	subi	r27, 0xF8	; 248
 604:	39 f0       	breq	.+14     	; 0x614 <__fixunssfsi+0x4c>
 606:	b9 3f       	cpi	r27, 0xF9	; 249
 608:	cc f3       	brlt	.-14     	; 0x5fc <__fixunssfsi+0x34>
 60a:	86 95       	lsr	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b3 95       	inc	r27
 612:	d9 f7       	brne	.-10     	; 0x60a <__fixunssfsi+0x42>
 614:	3e f4       	brtc	.+14     	; 0x624 <__fixunssfsi+0x5c>
 616:	90 95       	com	r25
 618:	80 95       	com	r24
 61a:	70 95       	com	r23
 61c:	61 95       	neg	r22
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	8f 4f       	sbci	r24, 0xFF	; 255
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	08 95       	ret

00000626 <__floatunsisf>:
 626:	e8 94       	clt
 628:	09 c0       	rjmp	.+18     	; 0x63c <__floatsisf+0x12>

0000062a <__floatsisf>:
 62a:	97 fb       	bst	r25, 7
 62c:	3e f4       	brtc	.+14     	; 0x63c <__floatsisf+0x12>
 62e:	90 95       	com	r25
 630:	80 95       	com	r24
 632:	70 95       	com	r23
 634:	61 95       	neg	r22
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	8f 4f       	sbci	r24, 0xFF	; 255
 63a:	9f 4f       	sbci	r25, 0xFF	; 255
 63c:	99 23       	and	r25, r25
 63e:	a9 f0       	breq	.+42     	; 0x66a <__floatsisf+0x40>
 640:	f9 2f       	mov	r31, r25
 642:	96 e9       	ldi	r25, 0x96	; 150
 644:	bb 27       	eor	r27, r27
 646:	93 95       	inc	r25
 648:	f6 95       	lsr	r31
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f1 11       	cpse	r31, r1
 654:	f8 cf       	rjmp	.-16     	; 0x646 <__floatsisf+0x1c>
 656:	fa f4       	brpl	.+62     	; 0x696 <__floatsisf+0x6c>
 658:	bb 0f       	add	r27, r27
 65a:	11 f4       	brne	.+4      	; 0x660 <__floatsisf+0x36>
 65c:	60 ff       	sbrs	r22, 0
 65e:	1b c0       	rjmp	.+54     	; 0x696 <__floatsisf+0x6c>
 660:	6f 5f       	subi	r22, 0xFF	; 255
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	16 c0       	rjmp	.+44     	; 0x696 <__floatsisf+0x6c>
 66a:	88 23       	and	r24, r24
 66c:	11 f0       	breq	.+4      	; 0x672 <__floatsisf+0x48>
 66e:	96 e9       	ldi	r25, 0x96	; 150
 670:	11 c0       	rjmp	.+34     	; 0x694 <__floatsisf+0x6a>
 672:	77 23       	and	r23, r23
 674:	21 f0       	breq	.+8      	; 0x67e <__floatsisf+0x54>
 676:	9e e8       	ldi	r25, 0x8E	; 142
 678:	87 2f       	mov	r24, r23
 67a:	76 2f       	mov	r23, r22
 67c:	05 c0       	rjmp	.+10     	; 0x688 <__floatsisf+0x5e>
 67e:	66 23       	and	r22, r22
 680:	71 f0       	breq	.+28     	; 0x69e <__floatsisf+0x74>
 682:	96 e8       	ldi	r25, 0x86	; 134
 684:	86 2f       	mov	r24, r22
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	2a f0       	brmi	.+10     	; 0x696 <__floatsisf+0x6c>
 68c:	9a 95       	dec	r25
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	da f7       	brpl	.-10     	; 0x68c <__floatsisf+0x62>
 696:	88 0f       	add	r24, r24
 698:	96 95       	lsr	r25
 69a:	87 95       	ror	r24
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret

000006a0 <__fp_inf>:
 6a0:	97 f9       	bld	r25, 7
 6a2:	9f 67       	ori	r25, 0x7F	; 127
 6a4:	80 e8       	ldi	r24, 0x80	; 128
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	08 95       	ret

000006ac <__fp_nan>:
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	80 ec       	ldi	r24, 0xC0	; 192
 6b0:	08 95       	ret

000006b2 <__fp_pscA>:
 6b2:	00 24       	eor	r0, r0
 6b4:	0a 94       	dec	r0
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	18 06       	cpc	r1, r24
 6bc:	09 06       	cpc	r0, r25
 6be:	08 95       	ret

000006c0 <__fp_pscB>:
 6c0:	00 24       	eor	r0, r0
 6c2:	0a 94       	dec	r0
 6c4:	12 16       	cp	r1, r18
 6c6:	13 06       	cpc	r1, r19
 6c8:	14 06       	cpc	r1, r20
 6ca:	05 06       	cpc	r0, r21
 6cc:	08 95       	ret

000006ce <__fp_round>:
 6ce:	09 2e       	mov	r0, r25
 6d0:	03 94       	inc	r0
 6d2:	00 0c       	add	r0, r0
 6d4:	11 f4       	brne	.+4      	; 0x6da <__fp_round+0xc>
 6d6:	88 23       	and	r24, r24
 6d8:	52 f0       	brmi	.+20     	; 0x6ee <__fp_round+0x20>
 6da:	bb 0f       	add	r27, r27
 6dc:	40 f4       	brcc	.+16     	; 0x6ee <__fp_round+0x20>
 6de:	bf 2b       	or	r27, r31
 6e0:	11 f4       	brne	.+4      	; 0x6e6 <__fp_round+0x18>
 6e2:	60 ff       	sbrs	r22, 0
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <__fp_round+0x20>
 6e6:	6f 5f       	subi	r22, 0xFF	; 255
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__fp_split3>:
 6f0:	57 fd       	sbrc	r21, 7
 6f2:	90 58       	subi	r25, 0x80	; 128
 6f4:	44 0f       	add	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	59 f0       	breq	.+22     	; 0x710 <__fp_splitA+0x10>
 6fa:	5f 3f       	cpi	r21, 0xFF	; 255
 6fc:	71 f0       	breq	.+28     	; 0x71a <__fp_splitA+0x1a>
 6fe:	47 95       	ror	r20

00000700 <__fp_splitA>:
 700:	88 0f       	add	r24, r24
 702:	97 fb       	bst	r25, 7
 704:	99 1f       	adc	r25, r25
 706:	61 f0       	breq	.+24     	; 0x720 <__fp_splitA+0x20>
 708:	9f 3f       	cpi	r25, 0xFF	; 255
 70a:	79 f0       	breq	.+30     	; 0x72a <__fp_splitA+0x2a>
 70c:	87 95       	ror	r24
 70e:	08 95       	ret
 710:	12 16       	cp	r1, r18
 712:	13 06       	cpc	r1, r19
 714:	14 06       	cpc	r1, r20
 716:	55 1f       	adc	r21, r21
 718:	f2 cf       	rjmp	.-28     	; 0x6fe <__fp_split3+0xe>
 71a:	46 95       	lsr	r20
 71c:	f1 df       	rcall	.-30     	; 0x700 <__fp_splitA>
 71e:	08 c0       	rjmp	.+16     	; 0x730 <__fp_splitA+0x30>
 720:	16 16       	cp	r1, r22
 722:	17 06       	cpc	r1, r23
 724:	18 06       	cpc	r1, r24
 726:	99 1f       	adc	r25, r25
 728:	f1 cf       	rjmp	.-30     	; 0x70c <__fp_splitA+0xc>
 72a:	86 95       	lsr	r24
 72c:	71 05       	cpc	r23, r1
 72e:	61 05       	cpc	r22, r1
 730:	08 94       	sec
 732:	08 95       	ret

00000734 <__fp_zero>:
 734:	e8 94       	clt

00000736 <__fp_szero>:
 736:	bb 27       	eor	r27, r27
 738:	66 27       	eor	r22, r22
 73a:	77 27       	eor	r23, r23
 73c:	cb 01       	movw	r24, r22
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
